@page "/newdocuments"
@using document.lib.shared.Services
@using document.lib.shared.TableEntities
<h3>New Documents</h3>

@inject QueryService QueryService
@inject BlobClientHelper BlobClientHelper
@inject ILogger<NewDocuments> Logger
There are @_documents.Count new Documents to process.

Upload new File: <br/>

<InputFile OnChange="@LoadFilesAsync" multiple></InputFile>

<ul>
    @foreach (var file in _loadedFiles)
    {
        <li>uploading file: @file</li>
    }
</ul>

<RadzenDataGrid Data="_documents" TItem="DocLibDocument">
    <Columns>
        <RadzenDataGridColumn TItem="DocLibDocument">
            <Template Context="data">
                @data.Name
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DocLibDocument">
            <Template Context="data">
                @data.BlobLocation
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DocLibDocument">
            <Template Context="data">
                <RadzenButton Click=@(async args => await DownloadAsync(data.BlobLocation)) Text="Download" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

Pdf Preview: 
@if (!string.IsNullOrEmpty(_pdfContent))
{
    <p>Preview</p>
    <embed src="@_pdfContent" width="800px" height="2100px" />
    <!-- <iframe src="@_pdfContent" width="800px" height="2100px" />
    <object data="@_pdfContent" width="500" height="200"></object> -->
}

@code {
    List<DocLibDocument> _documents = new List<DocLibDocument>();
    private readonly List<string> _loadedFiles = new();
    private string _pdfContent = "";

    protected override async Task OnInitializedAsync()
    {
        _documents = (await QueryService.ExecuteQueryAsync(new DocumentQuery{ Unsorted = true })).ToList();
    }

    private async Task LoadFilesAsync(InputFileChangeEventArgs e)
    {
        try
        {
            var files = e.GetMultipleFiles();
            _loadedFiles.AddRange(files.Select(x=>x.Name));

            foreach (var file in files)
            {
                var buffer = file.OpenReadStream(5120000);
                await BlobClientHelper.UploadBlobAsync($"unsorted/{file.Name}", buffer);
                _loadedFiles.Remove(file.Name);
            }
        }   
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
        }
        _loadedFiles.Clear();
    }

    private async Task DownloadAsync(string blob)
    {
        await using var output = new MemoryStream();
        var buffer = await BlobClientHelper.DownloadBlobAsync(blob);
        await buffer.CopyToAsync(output);
        output.Position = 0;
        var bytes = output.ToArray();
        _pdfContent = "data:application/pdf;base64,";
        _pdfContent += Convert.ToBase64String(bytes);
        StateHasChanged();
    }
}
