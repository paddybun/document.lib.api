@page "/DocumentOverview"
@using document.lib.data.context
@using document.lib.data.entities
@using Microsoft.EntityFrameworkCore

@inject DatabaseContext Context

@rendermode InteractiveServer

<RadzenRow>
    <RadzenColumn Size="12">
        <RadzenDataGrid
            @ref="_grid"
            AllowFiltering="true"
            AllowColumnResize="true"
            AllowVirtualization="true"
            FilterMode="FilterMode.Simple"
            TItem="Document"
            Count="@_count"
            Data="@_documents"
            LoadData="@LoadData">
            <Columns>
                @foreach (var prop in typeof(Document).GetProperties())
                {
                    <RadzenDataGridColumn Property="@prop.Name" Title="@prop.Name"/>
                }
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>
</RadzenRow>

@code {

    private ICollection<Document> _documents = null!;
    private int _count;
    private RadzenDataGrid<Document> _grid;
    private string _lastFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task LoadData(LoadDataArgs arg)
    {
        var query = Context.Documents.AsQueryable().AsNoTracking();
        if (!string.IsNullOrEmpty(arg.Filter))
        {
            _lastFilter = arg.Filter;
            query = query.Where(_grid.ColumnsCollection);
            _count = await query.CountAsync();
        }
        else
        {
            _count = await Context.Documents.CountAsync();
        }
        
        query = query.OrderBy(x => x.Id);
        query = query.Skip(arg.Skip ?? 0).Take(arg.Top ?? 0);
        _documents = await query.ToListAsync();
    }

}