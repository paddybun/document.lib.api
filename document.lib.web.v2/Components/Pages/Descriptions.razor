@page "/Descriptions"
@using document.lib.bl.contracts.Folders
@using document.lib.data.entities

@rendermode InteractiveServer

@inject IRegisterDescriptionsQuery RegisterDescriptionsQuery
@inject NavigationManager NavigationManager

<RadzenRow>
    <RadzenColumn Size="6">
        @if (_registerDescriptions.Any() && string.IsNullOrWhiteSpace(_selectedGroup))
        {
            <RadzenStack Gap="1rem" Orientation="Orientation.Vertical">
                <RadzenDataList Data="_registerDescriptionsGroups">
                    <Template>
                        <RadzenCard>
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
                                <RadzenText TextStyle="TextStyle.Body1" Text="@context.Key"/>
                                <RadzenText TextStyle="TextStyle.Body1" Text="@context.Value.ToString()"/>
                                <RadzenButton Click="@(_ => { Edit(context.Key); })" Text="Edit"/>
                            </RadzenStack>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            </RadzenStack>
        }
        else if (_registerDescriptions.Any() && !string.IsNullOrWhiteSpace(_selectedGroup))
        {
            foreach (var group in _registerDescriptions.Where(x => x.Group == _selectedGroup).OrderBy(x => x.Order))
            {
                <RadzenStack Gap="1rem" Orientation="Orientation.Horizontal">
                    <RadzenText Text="@group.Name"/>
                    <RadzenText Text="@group.DisplayName"/>
                    <RadzenText Text="@group.Group"/>
                </RadzenStack>
            }
        }
        else
        {
            <p>Loading ...</p>
        }
    </RadzenColumn >
</RadzenRow>

@code{

    private List<RegisterDescription> _registerDescriptions = [];
    private Dictionary<string, int> _registerDescriptionsGroups = [];
    
    private string _selectedGroup = string.Empty;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var descriptionsResult = await RegisterDescriptionsQuery.ExecuteAsync();
            _registerDescriptions = descriptionsResult.Value ?? [];
            
            _registerDescriptionsGroups = _registerDescriptions
                .GroupBy(x => x.Group)
                .ToDictionary(g => g.Key, g => g.Count());
            
            StateHasChanged();
        }
    }

    private void Edit(string context)
    {
        _selectedGroup = context;
    }

}